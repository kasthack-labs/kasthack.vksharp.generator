<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
* custom types to simplify support
*/
using Integer = System.Int64;
using Number = System.Double;
using String = System.String;
using Time = System.DateTimeOffset;

namespace kasthack.vksharp.Entities {
<#
    // ======== Objects
    foreach(var typeDefinitionProperty in O.Definitions.Where(a=>a.Value.IsObject())) {
        var typeDefinition = typeDefinitionProperty.Value; 
        var typeName = typeDefinitionProperty.Key;
        var hasBaseClass =  typeDefinition.HasBaseClass();

        if (!string.IsNullOrEmpty(typeDefinition.Description))
        {
#>
    ///<summary>
    ///<#= typeDefinition.Description #>
    ///<summary>
<#
        }
#>
    public partial class <#= typeName.ToPascalCase() #><#

        if (typeDefinition.AllOf!=null) {

            if (hasBaseClass) {

#> : <#= typeDefinition.BaseClassName().ToPascalCase()#> <#
            }
            else
            {
#>
 /*some bull*/<#
            }
        }
#>
{
<#
        var entityPropertySources = hasBaseClass ? new[]{ typeDefinition, typeDefinition.GetChildPropertySource()} : new[] {typeDefinition};
        foreach (var source in entityPropertySources.Where(a=>a!=null)) {
            foreach (var p in source.Properties) {
                if (!string.IsNullOrEmpty(p.Value.Description)) {
#>
        ///<summary>
        ///<#=                        p.Value.Description #>
        ///<summary>
<#
                }
        #>
        public <#=source.PropertyTypeName(p.Key, O.Definitions).ToPascalCase()#> <#=p.Key.ToPascalCase()#> {get;set;}
<#
            }
        }
#>
    }

<#
    }


    //========= Enums

    foreach(var typeDefinitionProperty in O.Definitions.Where(a=>a.Value.IsEnum())) {
        var typeDefinition = typeDefinitionProperty.Value; 
        var typeName = typeDefinitionProperty.Key;
        if (!string.IsNullOrEmpty(typeDefinition.Description)) {#>
    ///<summary>
    ///<#= typeDefinition.Description #>
    ///<summary>
<#
        }
#>
    public enum <#= typeDefinitionProperty.Key.ToPascalCase()#> {
<#          
        if (typeDefinition.Type == TypeKind.integer) {
            var e = typeDefinition.EnumNames;
            for(var i=0; i<e.Length;i++) {
#>
        <#=e[i].EnumName().ToPascalCase() #> = <#=typeDefinition.Enum[i]#>,
<#              
            }
        }
        else
        {
            foreach(var n in typeDefinition.Enum) {
#>
        <#=n.ToString().ToPascalCase()#>,
<#
            }
        }
#>
    }
<#
    }
#>
}